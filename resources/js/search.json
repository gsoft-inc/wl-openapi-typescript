[[{"l":"Home","p":["@workleap/create-schemas is a library for generating client code from OpenAPI Specifications."]},{"l":"Start here","p":["If you've never used this library before, hereâ€™s the best place to start:","Getting Started"]}],[{"l":"Getting Started","p":["In your project, you can install the create-schemas CLI using:","Create a create-schemas.config.ts file this this:","Then, run the create-schemas CLI in your terminal:","The src/codegen/types.ts file should be created."]},{"l":"Watch mode","p":["During development, you can regenerate the types whenever your input file changes or configuration changes.","To enable watch mode, add the --watch flag to the CLI command or add watch: true to the configuration file.","or"]},{"l":"Advanced usage","p":["If you have a more complex use case that isn't supported by@workleap/create-schemas you can try extending the behavior of the library by Creating a Plugin or using the JavaScript API.","If you think many users would benefit from a use case being officially supported, we encourage you to open an issue on Github."]}],[{"l":"Command Line Interface"},{"l":"create-schemas"},{"l":"Usage"},{"l":"Options","p":["--cwd path","--watch","-c, --config file","-h, --help","-i, --input path","-o, --outdir path","-v, --version","Description","Display available CLI options","Display version number","Enable watch mode","Options passed to the CLI will always take precedence over options declared in the config file.","Output directory (default: ./dist)","Path to the OpenAPI schema file","Path to working directory (default: .)","Use specified config file (default: create-schemas.config)"]}],[{"l":"Configuration","p":["When running create-schemas from the command line, it will automatically try to resolve a config file named create-schemas.config.ts inside project root(other JS and TS extensions are also supported).","The most basic config file looks like this:","You can use the defineConfig helper which should provide intellisense:"]},{"l":"root","p":["Type: string","Default: process.cwd()","Project root directory used to resolve relative paths. Can be an absolute path, or a path relative to the current working directory."]},{"l":"input","p":["Type: string","Path to the OpenAPI schema file. Can be a local path or URL to a remote file."]},{"l":"outdir","p":["Type: string","Default:./dist","Output directory path. The files that will be generated in this directory depends on the plugins being used."]},{"l":"watch","p":["Type: boolean","Default: false","Enable watch mode. Watch mode will regenerate the code whenever the input file or the configuration file changes."]},{"l":"plugins","p":["Type: Plugin[]","Default:[]","Array of plugins to use. See Using Plugins for more details."]},{"l":"openApiTsOptions","p":["Type: OpenApiTsOptions","Default:{}","Options passed to OpenAPI TypeScript for type generation. You normally should not have to change them.","See OpenAPI TypeScript options"]}],[{"l":"Using Plugins","p":["@workleap/create-schemas can be extended using plugins. Plugins can be used to ouput new files or modify files created by other plugins."]},{"l":"Adding a Plugin","p":["To use a plugin, you need to include it in the plugins array in the create-schemas.config.ts config file. For example:"]},{"l":"Built-in Plugins"},{"l":"experimental_openapiFetchPlugin","p":["Description:","This plugins outputs a very thin client based on OpenAPI Fetch. This client is based on the Fetch API and is fully typesafe.","To use this client, you need to install the openapi-fetch package:","Example usage:"]},{"l":"experimental_openapiMSWPlugin","p":["This plugin is currently marked as experimental. It may change at any time.","Description:","This plugins outputs a very thin wrapper over openapi-msw. This package lets your define typed MSW handlers.","To use this client, you need to install the openapi-msw package:","Example usage:"]},{"l":"Creating a Plugin","p":["The Plugin API is currently marked as unstable. It may change at any time.","If you desire a specific plugin, please open an issue on Github.","A plugin is an object with a name and one or more build hooks, which follows our conventions. A plugin should export a function that can be called with plugin specific options and returns such an object.","Plugins allow you to customize @workleap/create-schemas behavior by, for example, modifying code before writing the files to disk."]},{"l":"A Simple Example","p":["The following plugin will add a comment at the top of every generated file."]},{"l":"Build hooks","p":["To interact with the code generation process, a plugin may include \"hooks\". Hooks are function that are are called at various stages of the generation. Hooks can affect how a build is run, add a file to the output, or modify a build once complete."]},{"l":"buildStart","p":["Type:(context: BuildStartContext) = void","The first hook that is called during the generation process. Use this to read the user configuration or emit new files."]},{"l":"transform","p":["Type:(context: TransformContext) = TransformResult | undefined","Use this hook to modify a file generated by another plugin or to emit new files depending on the content of other files."]},{"l":"buildEnd","p":["Type:(context: BuildEndContext) = void","Run code at the end of the generation. This can be used to analyze the code that is being emitted."]}],[{"l":"JavaScript API","p":["The JavaScript API allows you to use the features of @workleap/create-schemas in any Node.js script."]},{"l":"resolveConfig","p":["Type signature:","Description:","Finds, loads, and validates user configurations. You can call this function many times and it will always return the latest user configuration.","This function converts all paths into fully qualified URLs, meaning a relative path like ./swagger.json will turn into file:///path/to/cwd/swagger.json. You will most likely have to use fileURLToPath from the node:url module or the URL class depending on how you plan to use the path.","Example usage:"]},{"l":"generate","p":["Type signature:","Example usage:"]},{"l":"watch","p":["Type signature:","Example usage:"]}],[{"l":"Mock Service Worker"},{"l":"Type-safe Handlers","p":["The experimental_openapiMSWPlugin plugin allows you to define MSW handlers in a type-safe way.","To use this client, you need to install the openapi-msw package:","Example usage:"]},{"l":"Auto-generated handlers","p":["Soon...","See https://source.mswjs.io/"]}]]